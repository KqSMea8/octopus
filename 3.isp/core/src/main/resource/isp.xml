<?xml version="1.0" encoding="utf-8"?>
<!-- 事件的入口只有listener自身事件和flow外部调用事件 -->
<bridge>
    <instanceid>isp</instanceid>

    <!-- 定义该cell中使用到的XMLObject,XMLDoObject对象，通过引用xmlid实例化 -->
    <defs>
        <def xmlid="Flows"  clazz="com.octopus.utils.flow.impl.FlowMgr"/>
        <def xmlid="Flow"  clazz="com.octopus.utils.flow.impl.Flow"/>
        <def xmlid="Node"  clazz="com.octopus.utils.bftask.impl.BFTask"/>
        <def xmlid="InvokeHandler"  clazz="com.octopus.utils.xml.handle.XMLObjectHandler"/>
        <def xmlid="ParameterFieldGet"  clazz="com.octopus.isp.utils.ObjectFieldGet"/>
        <!-- cell-->
        <def xmlid="Cell"  clazz="com.octopus.isp.cell.impl.Cell"/>
        <def xmlid="Action"  clazz="com.octopus.isp.cell.actions.DefaultCellAction"/>
        <def xmlid="RuleExecutor"  clazz="com.octopus.isp.executors.RuleBFExecutor"/>
        <def xmlid="ActionExecutor"  clazz="com.octopus.isp.executors.ActionExecutor"/>
        <def xmlid="TransactionExecutor"  clazz="com.octopus.isp.executors.TransactionExecutor"/>
        <def xmlid="CellExecutorFromPars"  clazz="com.octopus.isp.executors.CellExecutorFromPars"/>
        <def xmlid="StepExecutor"  clazz="com.octopus.isp.executors.StepExecutor"/>
        <def xmlid="DataExecutor"  clazz="com.octopus.isp.executors.DataExecutor"/>
        <def xmlid="DataClient"  clazz="com.octopus.tools.dataclient.impl.DataClient"/>
    </defs>

    <!-- 代理类,可以用于监控、统计、主机之间均衡调用路由
    <handler clazz="extends XMLObject implements IMethodAddition" level="10" iswaitebefore="" isnextinvoke="" targetxmlids="or targetids="/>
    -->
    <!-- 主机实例管理对具体调用方法的注册
    <invocationhandler clazz="com.octopus.tools.jvminsmgr.invokehandler.ExtendInstanceInvokeHandler" targetxmlids="cache" targetids="" desc="扩展实例方法调用">
        <action seq="1" path="com.octopus.tools.jvminsmgr.invokehandler.RemoteCalLocalResourceInvokeAction" targetmethods="cache#add" desc="计算当前主机资源判断是否扩展调用，可以则扩展调用，本地不调用"/>
        <action seq="2" path="com.octopus.tools.jvminsmgr.invokehandler.RemoteInvokeAction" targetmethods="cache#update,cache#delete,cache#get" desc="直接扩展调用，调用成功本地不调用，扩展中一个成功即为成功，失败调用本地"/>
        <action seq="3" path="com.octopus.tools.jvminsmgr.invokehandler.MargeResultInvokeAction" targetmethods="cache#query" desc="直接扩展调用和本地调用，合并返回结果"/>
    </invocationhandler>  -->

    <!-- ORMapping 把Bean映射为存储对象，该功能需要完成由dataclient统一提供 -->
    <mappings>
        <mapping key="field_log_mapping" clazz="com.octopus.tools.dataclient.utils.DataMapping">
            <m field="USER_CODE">userCode</m>
            <m field="S_CODE">stockCode</m>
            <m field="ISSIM">issim</m>
            <m field="D_JYJ">opPrice</m>
            <m field="I_JYL">opNumber</m>
            <m field="C_DATE">opDate</m>
            <m field="OP_STATUS">opStatus</m>
            <m field="STOCK_RULE">sotckRule</m>
        </mapping>
    </mappings>

    <!-- 监控是一个isp自身的XMLDoObject能力，负责监控自身的环境信息，资源使用信息，运行参数信息，用户信息，实时信息同步给其他isp和管理isp -->
    <!--<monitor></monitor>-->

    <!-- 统计是一个isp自身的XMLDoObject能力，负责统计环境信息，资源使用信息，运行参数信息，用户信息，时间累计信息同步给其他isp和管理isp -->
    <!--<statistic></statistic>-->

    <!-- 安全是一个isp自身的XMLDoObject能力，负责isp初始化时的各项授权，运行时的鉴权，安全信息同步给管理isp -->
    <!--<security></security>-->

    <!-- 日志是一个isp自身的XMLDoObject能力，负责记录所有初始化信息，运行环境信息，调用信息并负责存储-->
    <!--<log></log>-->

    <!-- 描述是一个isp自身的XMLDoObject能力，用以提供该isp系统的描述，功能、结构图，使用的权限，到期等等，同步给管理isp-->
    <!--<desc></desc>-->

    <!-- 调用事务是isp自身业务保障的XMLDoObject能力，负责调用的事务完整 -->
    <!--<transaction></transaction>-->

    <!-- 针对web服务session会话保持，是web isp的增强XMLDoObject能力，负责web的session管理 -->
    <!--<sessions></sessions>-->

    <!-- 数据操作是isp自身业务保障的XMLDoObject能力，负责存储数据的操作，包括db，file，ftp等等 -->
    <!--<dataclient xmlid="DataClient"/>-->

    <!-- 启动协议 -->
    <launchers>
        <launcher key="web" enable="true" type="out" clazz="com.octopus.isp.bridge.launchers.impl.WebFilterLauncher" protocol="http" port="" desc="">
            <inputconvert clazz="com.octopus.isp.bridge.launchers.convert.ConvertRequestData2JSONArray"/>
            <outputconvert clazz="com.octopus.isp.bridge.launchers.convert.ConvertReturn2POJO"/>
        </launcher>
    </launchers>

    <!-- 系统环境变量 -->
    <env clazz="com.octopus.isp.ds.DataEnv">
        <property name="namespace.style"></property>
    </env>
    <!-- 上下文环境变量 -->
    <contexts clazz="com.octopus.isp.ds.Contexts">
        <context seq="2">
            <property name="language" value="zh" mapping="session.user.language"/>
            <property name="country" value="cn" mapping="session.user.country"/>
            <property name="currency" value="jiangsu" mapping="session.user.region"/>
            <property name="datestyle" value="yyyy-MM-dd" mapping="session.user.datestyle"/>
            <property name="datetimestyle" value="yyyy-MM-dd 24HH:mm:ss" mapping="session.user.datetimestyle"/>
            <property name="timezone" value="Asia/Shanghai" mapping="session.user.timezone"/>
        </context>
        <context seq="1">
            <property name="language" value="zh" mapping="session.user.language"/>
            <property name="country" value="cn" mapping="session.user.country"/>
            <property name="currency" value="jiangsu" mapping="session.user.region"/>
        </context>
    </contexts>
    <!-- 用户登录信息 -->
    <sessionmgr clazz="com.octopus.isp.ds.DataSession" sessionidpath="">
        <session>
            <user op.name="" op.code="" op.type="" op.language="" op.country="" op.currency="" op.logindate="" op.zone="" />
        </session>
    </sessionmgr>

    <!-- cells路径配置 -->
    <cells>
        <!-- bridge 自由cells -->
        <cell key="isp.invoke" isenable="true" xml="com/octopus/isp/files/cells/Invoke.cell" desc="负责本地、远程调用，结果汇集" />
        <!-- 业务规则cells -->
        <cell key="isp.rules" isenable="true" xml="com/octopus/isp/files/cells/Rules.cell" desc="规则执行cell" />
        <cell key="isp.dataop" isenable="true" xml="com/octopus/isp/files/cells/DataOperator.cell" desc="数据操作" />
        <cell key="isp.stock" isenable="true" xml="cells/stock.cell" desc="" />
        <cell key="isp.feixin" isenable="false" xml="cells/feixin.cell" desc="" />
    </cells>

    <!-- 系统监听 XMLDoObject-->
    <listeners>
        <listener xmlid="Receiver" seq="1"></listener>
    </listeners>

    <!-- 请求管道 -->
    <flow xmlid="Flow" key="RequestChain" >
        <executor xmlid="CellExecutor"/>
        <node xmlid="Node" type="normal" seq="-1">
            <before>
                <step seq="0" action="CellCode" desc=""/>
            </before>
        </node>
    </flow>

    <!-- 异步返回队列 -->
    <answer></answer>

</bridge>