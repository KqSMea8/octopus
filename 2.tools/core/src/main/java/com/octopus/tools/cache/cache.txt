
目标:这里的缓存是通用的，可以修改配置适合各种场景的使用。
对各种可以放入内存中的资源进行缓存。缓存可以分为：固定缓存、动态缓存、长期缓存、临时缓存、大内容缓存、小内容缓存、分布式缓存、集中缓存。面对各种应用场景都需要支持。
缓存的目的是让资源获取起来比较快，降低请求时间。根据以上不同的缓存，我们需要抽象出一个缓存能满足这些场景需求。根据内容更新策略、缓存生命周期、划定内存大小、是否扩展等因素实现统一缓存。
缓存只管理内存中数据或对象，资源的获取、保存由DataClient负责

本模块只负责单实例存储，分布式由分布式模块负责。
只负责单元数据的存储，关联查询的存储与获取由dataclient中的操作语句解析负责。

目前实现:
  1.缓存根据主机资源自动扩展，存储、变更、删除、获取
  2.本地缓存实现记录条数、内存大小限制，达到最大值告警
  3.本地采用HashMap做存储，存储key-value

满足需求:
  1.分布式缓存、大内容缓存、小内容缓存,通过配置是否扩展、设置内存或记录大小实现.
  2.集中缓存:按业务存放指定实例

可以进一步:
  1.固定缓存:只增、改、不删的缓存
  2.动态缓存:根据使用频率，配置删除策略,策略通过增加ICacheEvent实现
  3.临时缓存:根据临时策略，可以通过增加ICacheListener、ICacheEvent实现。

操作:
    1.从缓存管理那根据缓存id，获取指定缓存。
    2.缓存有，增、删、改、查、清操作。
    3.cache配置一般是嵌入到其他使用者中的。

invocationhandler:实例管理配置，配置那些类/对象需要实例管理
    action:配置该实例管理方案适配的方法

listeners:缓存的监听，在缓存管理初始化时启动，主要对所有缓存的监听。

cache:某个缓存
    listeners:某个缓存的监听
    instance:当前缓存如果需要实例管理，这里配置合适的实例信息范围。如果没有根据实例管理自身配置决定。
    events:缓存操作前的探针事件，目前实现是对缓存超限制的告警。


