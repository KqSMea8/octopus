package com.octopus.tools.cache.impl;

import com.octopus.tools.cache.ICache;
import com.octopus.tools.cache.ICacheEvent;
import com.octopus.tools.cache.ICacheListener;
import com.octopus.tools.dataclient.IDataClient;
import com.octopus.tools.dataclient.ds.store.DataOperatorContainer;
import com.octopus.tools.dataclient.ds.store.TableValue;
import com.octopus.tools.dataclient.utils.IDataMapping;
import com.octopus.utils.alone.ArrayUtils;
import com.octopus.utils.cachebatch.FlushWorkTask;
import com.octopus.utils.xml.XMLMakeup;
import com.octopus.utils.xml.XMLObject;
import com.octopus.utils.xml.auto.ResultCheck;
import com.octopus.utils.xml.auto.XMLDoObject;
import com.octopus.utils.xml.auto.XMLParameter;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * User: Administrator
 * Date: 14-10-28
 * Time: 上午11:37
 */
public class SynStoreEvent extends XMLDoObject implements ICacheEvent {
    static transient Log log = LogFactory.getLog(SynStoreEvent.class);
    IDataMapping mapping;
    public SynStoreEvent(XMLMakeup xml, XMLObject parent,Object[] containers) throws Exception {
        super(xml, parent,containers);
    }

    @Override
    public boolean doCacheEvent(String method,String key,Object value) {
        try{
            //数据库保存成功后更新内存
                if(method.equals(ICache.METHOD_NAME_ADD)){
                    IDataClient dataClient = (IDataClient)getPropertyObject("dataclient");
                    DataOperatorContainer dc = new DataOperatorContainer();
                    List<Map> tvs = mapping.mapping(value);
                    if(ArrayUtils.isNotEmpty(tvs)){
                        dc.addTablesValue(tvs);
                        dataClient.store(dc,null);
                        return true;
                    }

                }else if(method.equals(ICache.METHOD_NAME_ADDLIST)){
                    IDataClient dataClient = (IDataClient)getPropertyObject("dataclient");
                    DataOperatorContainer dc = new DataOperatorContainer();
                    TableValue[] tvs = mapping.mapping(value);
                    if(ArrayUtils.isNotEmpty(tvs)){
                        dc.addTablesValue(tvs);
                        dataClient.store(dc,null);
                        return true;
                    }
                }

        }catch (Exception e){
            e.printStackTrace();
            log.error(e);
        }
        return false;
    }


    @Override
    public Object doSomeThing(String xmlid, XMLParameter env, Map input, Map output, Map config) throws Exception {
        doCacheEvent((String)input.get("op"),(String)input.get("key"),input.get("value"));
        return null;  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public boolean checkInput(String xmlid, XMLParameter env, Map input, Map output, Map config) throws Exception {
        return true;  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public ResultCheck checkReturn(String xmlid, XMLParameter env, Map input, Map output, Map config, Object ret) throws Exception {
        return new ResultCheck(true,ret);  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public boolean rollback(String xmlid, XMLParameter env, Map input, Map output, Map config,Object ret,Exception e) throws Exception {
        return false;  //To change body of implemented methods use File | Settings | File Templates.
    }


}
