dataclient是系统全局的，一个实例只有一个配置
数据可以按记录中的数据、上下文数据进行数据分片存储。
考虑存储、获取、缓存、事务
负责数据库、文件、远程文件的获取

dataclient:数据操作，主要对db、file的实时操作，目前不包括缓存操作。dataclient提供增、删、改、数据查询、结构查询操作。
        dataclient实例化时启动listener.
        dataclient操作时:
            1.根据操作编号和router的配置获取engine
            2.如果engine有多个，根据transaction配置产生事务任务。如果只有一个任务，任务的事务设置为任务自己控制。

    transaction:数据操作需要事务的支持，事务保证操作的一致性。
        异常的通知，如果是网络异常放入等待队列，等待任务主动从队列中获取处理。对于db，事务采用jdbc控制；对于文件后续文件操作仔细考虑。
        操作事务的环境变量中都要有操作员信息(工号、手机号、机器ip等等),方便信息反馈。
        事务配置:
            1.超时时间，可以统一设置，也可以每个调用时设置。
            2.事务分类:
                1).及时反馈型:事务任务调用，一旦异常，立即撤销所有任务并反馈信息。
                2).等待异步反馈:网络异常或调用超时，该事务任务放入数据库对应缓存，由任务定时扫描缓存获取任务处理，处理完标记。事务定时检查进程检查通过反馈信息，任务超时(8小时)撤销任务，反馈信息。

    router:
        orms:
            orm:操作编号和engine的对应关系。一个操作编号的数据，可以存放在多个engine中。对于一个指定的数据只可能存放在某个pools的一个pool中。

    engine: 主要有两种类型的engine:db/file，db目前包括mysql/oracle,file包括classloader/local/ftp中的文件，文件有String/inputstream两种方式返回。
        dcs: 定义操作编码和操作命令的关系，以及和pool的路由属性值
        pools: 对pool的一个逻辑分组
            pool: 创建连接及操作命令的执行,支持事务管理。提供执行、提交、回滚操作。
                conn: 连接属性。
                match: 路由属性匹配，判断当前pool是否符合路由属性要求。可以根据orm的属性和传入的环境参数作判断。
        typer: 对pool返回的值作数据类型转换

    listeners: 可以是数据操作的监控
    events:每次接口方法操作前的探针事件。可以对操作做判断、修改、数据采集。








